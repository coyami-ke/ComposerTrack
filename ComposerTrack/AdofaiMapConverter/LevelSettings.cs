using JSON;
using AdofaiMapConverter.Types;
using AdofaiMapConverter.Helpers;

namespace AdofaiMapConverter
{
    public class LevelSetting
    {
        public int version = 9;
        public string artist = "작곡가";
        public SpecialArtistType specialArtistType = SpecialArtistType.None;
        public string artistPermission = "";
        public string song = "곡";
        public string author = "만든이";
        public Toggle separateCountdownTime = Toggle.Enabled;
        public string previewImage = "";
        public string previewIcon = "";
        public string previewIconColor = "003f52";
        public int previewSongStart = 0;
        public int previewSongDuration = 10;
        public Toggle seizureWarning = Toggle.Disabled;
        public string levelDesc = "레벨에 대해 말해보세요!";
        public string levelTags = "";
        public string artistLinks = "";
        public int difficulty = 1;
        public string songFilename = "";
        public double bpm = 100;
        public int volume = 100;
        public int offset = 0;
        public int pitch = 100;
        public HitSound hitsound = HitSound.Kick;
        public int hitsoundVolume = 100;
        public int countdownTicks = 4;
        public TrackColorType trackColorType = TrackColorType.Single;
        public string trackColor = "debb7b";
        public string secondaryTrackColor = "ffffff";
        public double trackColorAnimDuration = 2;
        public TrackColorPulse trackColorPulse = TrackColorPulse.None;
        public int trackPulseLength = 10;
        public TrackStyle trackStyle = TrackStyle.Standard;
        public TrackAnimationType trackAnimation = TrackAnimationType.None;
        public int beatsAhead = 3;
        public TrackAnimationType2 trackDisappearAnimation = TrackAnimationType2.None;
        public int beatsBehind = 4;
        public string backgroundColor = "000000";
        public Toggle showDefaultBGIfNoImage = Toggle.Enabled;
        public string bgImage = "";
        public string bgImageColor = "ffffff";
        public Vector2 parallax = Vector2.Hrd;
        public BgDisplayMode bgDisplayMode = BgDisplayMode.FitToScreen;
        public Toggle lockRot = Toggle.Disabled;
        public Toggle loopBG = Toggle.Disabled;
        public int unscaledSize = 100;
        public CamMovementType relativeTo = CamMovementType.Player;
        public Vector2 position = Vector2.Zero;
        public double rotation = 0;
        public int zoom = 100;
        public string bgVideo = "";
        public Toggle loopVideo = Toggle.Disabled;
        public int vidOffset = 0;
        public Toggle floorIconOutlines = Toggle.Disabled;
        public Toggle stickToFloors = Toggle.Enabled;
        public Ease planetEase = Ease.Linear;
        public int planetEaseParts = 1;
        public EasePartBehavior planetEasePartBehavior = EasePartBehavior.Mirror;
        public string customClass = "";
        public bool legacyFlash = false;
        public bool legacySpriteTiles = false;
        public static LevelSetting FromNode(JsonNode node)
        {
            LevelSetting newSetting = new LevelSetting();
            newSetting.version = node["version"].AsInt;
            newSetting.artist = node["artist"].ToString().TrimLR();
            newSetting.specialArtistType = node["specialArtistType"].ToString().TrimLR().Parse<SpecialArtistType>();
            newSetting.artistPermission = node["artistPermission"].ToString().TrimLR();
            newSetting.song = node["song"].ToString().TrimLR();
            newSetting.author = node["author"].ToString().TrimLR();
            newSetting.separateCountdownTime = node["separateCountdownTime"].ToString().TrimLR().Parse<Toggle>();
            newSetting.previewImage = node["previewImage"].ToString().TrimLR();
            newSetting.previewIcon = node["previewIcon"].ToString().TrimLR();
            newSetting.previewIconColor = node["previewIconColor"].ToString().TrimLR();
            newSetting.previewSongStart = node["previewSongStart"].AsInt;
            newSetting.previewSongDuration = node["previewSongDuration"].AsInt;
            newSetting.seizureWarning = node["seizureWarning"].ToString().TrimLR().Parse<Toggle>();
            newSetting.levelDesc = node["levelDesc"].ToString().TrimLR();
            newSetting.levelTags = node["levelTags"].ToString().TrimLR();
            newSetting.artistLinks = node["artistLinks"].ToString().TrimLR();
            newSetting.difficulty = node["difficulty"].AsInt;
            newSetting.songFilename = node["songFilename"].ToString().TrimLR();
            newSetting.bpm = node["bpm"].AsDouble;
            newSetting.volume = node["volume"].AsInt;
            newSetting.offset = node["offset"].AsInt;
            newSetting.pitch = node["pitch"].AsInt;
            newSetting.hitsound = node["hitsound"].ToString().TrimLR().Parse<HitSound>();
            newSetting.hitsoundVolume = node["hitsoundVolume"].AsInt;
            newSetting.countdownTicks = node["countdownTicks"].AsInt;
            newSetting.trackColorType = node["trackColorType"].ToString().TrimLR().Parse<TrackColorType>();
            newSetting.trackColor = node["trackColor"].ToString().TrimLR();
            newSetting.secondaryTrackColor = node["secondaryTrackColor"].ToString().TrimLR();
            newSetting.trackColorAnimDuration = node["trackColorAnimDuration"].AsDouble;
            newSetting.trackColorPulse = node["trackColorPulse"].ToString().TrimLR().Parse<TrackColorPulse>();
            newSetting.trackPulseLength = node["trackPulseLength"].AsInt;
            newSetting.trackStyle = node["trackStyle"].ToString().TrimLR().Parse<TrackStyle>();
            newSetting.trackAnimation = node["trackAnimation"].ToString().TrimLR().Parse<TrackAnimationType>();
            newSetting.beatsAhead = node["beatsAhead"].AsInt;
            newSetting.trackDisappearAnimation = node["trackDisappearAnimation"].ToString().TrimLR().Parse<TrackAnimationType2>();
            newSetting.beatsBehind = node["beatsBehind"].AsInt;
            newSetting.backgroundColor = node["backgroundColor"].ToString().TrimLR();
            newSetting.showDefaultBGIfNoImage = node["showDefaultBGIfNoImage"].ToString().TrimLR().Parse<Toggle>();
            newSetting.bgImage = node["bgImage"].ToString().TrimLR();
            newSetting.bgImageColor = node["bgImageColor"].ToString().TrimLR();
            newSetting.parallax = Vector2.FromNode(node["parallax"]);
            newSetting.bgDisplayMode = node["bgDisplayMode"].ToString().TrimLR().Parse<BgDisplayMode>();
            newSetting.lockRot = node["lockRot"].ToString().TrimLR().Parse<Toggle>();
            newSetting.loopBG = node["loopBG"].ToString().TrimLR().Parse<Toggle>();
            newSetting.unscaledSize = node["unscaledSize"].AsInt;
            newSetting.relativeTo = node["relativeTo"].ToString().TrimLR().Parse<CamMovementType>();
            newSetting.position = Vector2.FromNode(node["position"]);
            newSetting.rotation = node["rotation"].AsDouble;
            newSetting.zoom = node["zoom"].AsInt;
            newSetting.bgVideo = node["bgVideo"].ToString().TrimLR();
            newSetting.loopVideo = node["loopVideo"].ToString().TrimLR().Parse<Toggle>();
            newSetting.vidOffset = node["vidOffset"].AsInt;
            newSetting.floorIconOutlines = node["floorIconOutlines"].ToString().TrimLR().Parse<Toggle>();
            newSetting.stickToFloors = node["stickToFloors"].ToString().TrimLR().Parse<Toggle>();
            newSetting.planetEase = node["planetEase"].ToString().TrimLR().Parse<Ease>();
            newSetting.planetEaseParts = node["planetEaseParts"].AsInt;
            newSetting.planetEasePartBehavior = node["planetEasePartBehavior"].ToString().TrimLR().Parse<EasePartBehavior>();
            newSetting.customClass = node["customClass"].ElseEmpty().ToString().TrimLR();
            newSetting.legacyFlash = node["legacyFlash"].AsBool;
            newSetting.legacySpriteTiles = node["legacySpriteTiles"].AsBool;
            return newSetting;
        }
        public LevelSetting Copy()
        {
            LevelSetting newSetting = new LevelSetting();
            newSetting.version = version;
            newSetting.artist = artist;
            newSetting.specialArtistType = specialArtistType;
            newSetting.artistPermission = artistPermission;
            newSetting.song = song;
            newSetting.author = author;
            newSetting.separateCountdownTime = separateCountdownTime;
            newSetting.previewImage = previewImage;
            newSetting.previewIcon = previewIcon;
            newSetting.previewIconColor = previewIconColor;
            newSetting.previewSongStart = previewSongStart;
            newSetting.previewSongDuration = previewSongDuration;
            newSetting.seizureWarning = seizureWarning;
            newSetting.levelDesc = levelDesc;
            newSetting.levelTags = levelTags;
            newSetting.artistLinks = artistLinks;
            newSetting.difficulty = difficulty;
            newSetting.songFilename = songFilename;
            newSetting.bpm = bpm;
            newSetting.volume = volume;
            newSetting.offset = offset;
            newSetting.pitch = pitch;
            newSetting.hitsound = hitsound;
            newSetting.hitsoundVolume = hitsoundVolume;
            newSetting.countdownTicks = countdownTicks;
            newSetting.trackColorType = trackColorType;
            newSetting.trackColor = trackColor;
            newSetting.secondaryTrackColor = secondaryTrackColor;
            newSetting.trackColorAnimDuration = trackColorAnimDuration;
            newSetting.trackColorPulse = trackColorPulse;
            newSetting.trackPulseLength = trackPulseLength;
            newSetting.trackStyle = trackStyle;
            newSetting.trackAnimation = trackAnimation;
            newSetting.beatsAhead = beatsAhead;
            newSetting.trackDisappearAnimation = trackDisappearAnimation;
            newSetting.beatsBehind = beatsBehind;
            newSetting.backgroundColor = backgroundColor;
            newSetting.showDefaultBGIfNoImage = showDefaultBGIfNoImage;
            newSetting.bgImage = bgImage;
            newSetting.bgImageColor = bgImageColor;
            newSetting.parallax = parallax;
            newSetting.bgDisplayMode = bgDisplayMode;
            newSetting.lockRot = lockRot;
            newSetting.loopBG = loopBG;
            newSetting.unscaledSize = unscaledSize;
            newSetting.relativeTo = relativeTo;
            newSetting.position = position;
            newSetting.rotation = rotation;
            newSetting.zoom = zoom;
            newSetting.bgVideo = bgVideo;
            newSetting.loopVideo = loopVideo;
            newSetting.vidOffset = vidOffset;
            newSetting.floorIconOutlines = floorIconOutlines;
            newSetting.stickToFloors = stickToFloors;
            newSetting.planetEase = planetEase;
            newSetting.planetEaseParts = planetEaseParts;
            newSetting.planetEasePartBehavior = planetEasePartBehavior;
            newSetting.customClass = customClass;
            newSetting.legacyFlash = legacyFlash;
            newSetting.legacySpriteTiles = legacySpriteTiles;
            return newSetting;
        }
        public JsonNode ToNode()
        {
            JsonNode node = JsonNode.Empty;
            node["version"] = version;
            node["artist"] = artist;
            node["specialArtistType"] = specialArtistType.ToString();
            node["artistPermission"] = artistPermission;
            node["song"] = song;
            node["author"] = author;
            node["separateCountdownTime"] = separateCountdownTime.ToString();
            node["previewImage"] = previewImage;
            node["previewIcon"] = previewIcon;
            node["previewIconColor"] = previewIconColor;
            node["previewSongStart"] = previewSongStart;
            node["previewSongDuration"] = previewSongDuration;
            node["seizureWarning"] = seizureWarning.ToString();
            node["levelDesc"] = levelDesc;
            node["levelTags"] = levelTags;
            node["artistLinks"] = artistLinks;
            node["difficulty"] = difficulty;
            node["songFilename"] = songFilename;
            node["bpm"] = bpm;
            node["volume"] = volume;
            node["offset"] = offset;
            node["pitch"] = pitch;
            node["hitsound"] = hitsound.ToString();
            node["hitsoundVolume"] = hitsoundVolume;
            node["countdownTicks"] = countdownTicks;
            node["trackColorType"] = trackColorType.ToString();
            node["trackColor"] = trackColor;
            node["secondaryTrackColor"] = secondaryTrackColor;
            node["trackColorAnimDuration"] = trackColorAnimDuration;
            node["trackColorPulse"] = trackColorPulse.ToString();
            node["trackPulseLength"] = trackPulseLength;
            node["trackStyle"] = trackStyle.ToString();
            node["trackAnimation"] = trackAnimation.ToString();
            node["beatsAhead"] = beatsAhead;
            node["trackDisappearAnimation"] = trackDisappearAnimation.ToString();
            node["beatsBehind"] = beatsBehind;
            node["backgroundColor"] = backgroundColor;
            node["showDefaultBGIfNoImage"] = showDefaultBGIfNoImage.ToString();
            node["bgImage"] = bgImage;
            node["bgImageColor"] = bgImageColor;
            node["parallax"] = parallax.ToNode();
            node["bgDisplayMode"] = bgDisplayMode.ToString();
            node["lockRot"] = lockRot.ToString();
            node["loopBG"] = loopBG.ToString();
            node["unscaledSize"] = unscaledSize;
            node["relativeTo"] = relativeTo.ToString();
            node["position"] = position.ToNode();
            node["rotation"] = rotation;
            node["zoom"] = zoom;
            node["bgVideo"] = bgVideo;
            node["loopVideo"] = loopVideo.ToString();
            node["vidOffset"] = vidOffset;
            node["floorIconOutlines"] = floorIconOutlines.ToString();
            node["stickToFloors"] = stickToFloors.ToString();
            node["planetEase"] = planetEase.ToString();
            node["planetEaseParts"] = planetEaseParts;
            node["planetEasePartBehavior"] = planetEasePartBehavior.ToString();
            node["customClass"] = customClass;
            node["legacyFlash"] = legacyFlash;
            node["legacySpriteTiles"] = legacySpriteTiles;
            return node;
        }
    }
}
